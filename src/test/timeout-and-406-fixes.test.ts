/**
 * Tests for timeout and 406 error fixes
 */

import { generateSlug, generateUniqueSlug, generateUniqueSlugsInBatch } from '../utils/gameUrls';

describe('Timeout and 406 Error Fixes', () => {
  describe('Slug Generation Performance', () => {
    test('generateSlug should handle accented characters quickly', () => {
      const testCases = [
        { input: 'PokÃ©mon Blue Version', expected: 'pokemon-blue-version' },
        { input: 'PokÃ©mon Mystery Dungeon: Blue Rescue Team', expected: 'pokemon-mystery-dungeon-blue-rescue-team' },
        { input: 'CafÃ© & RÃ©sumÃ© @ ParÃ­s', expected: 'cafe-resume-paris' },
        { input: '!!!', expected: '' },
        { input: '   PokÃ©mon   ', expected: 'pokemon' },
      ];

      const startTime = performance.now();
      
      testCases.forEach(({ input, expected }) => {
        const result = generateSlug(input);
        expect(result).toBe(expected);
      });
      
      const duration = performance.now() - startTime;
      expect(duration).toBeLessThan(50); // Should complete very quickly
    });

    test('generateSlug should handle large batches efficiently', () => {
      const startTime = performance.now();
      
      // Generate 100 slugs
      for (let i = 0; i < 100; i++) {
        generateSlug(`PokÃ©mon Game ${i} Version`);
      }
      
      const duration = performance.now() - startTime;
      expect(duration).toBeLessThan(100); // Should complete in under 100ms
    });

    test('generateUniqueSlug should have timeout fallback', async () => {
      // This test verifies the timeout handling without actually timing out
      const result = await generateUniqueSlug('Test Game', 12345);
      
      // Should return either the base slug or slug with ID
      expect(result === 'test-game' || result === 'test-game-12345').toBe(true);
      expect(result).toMatch(/^[a-z0-9-]+$/);
    });

    test('generateUniqueSlugsInBatch should handle multiple games', async () => {
      const games = [
        { name: 'PokÃ©mon Red Version', id: 1511 },
        { name: 'PokÃ©mon Blue Version', id: 1512 },
        { name: 'PokÃ©mon Yellow Version', id: 1513 },
        { name: 'PokÃ©mon Crystal Version', id: 1514 },
        { name: 'PokÃ©mon Black Version 2', id: 8284 },
      ];

      const startTime = performance.now();
      const slugMap = await generateUniqueSlugsInBatch(games);
      const duration = performance.now() - startTime;

      // Should complete reasonably quickly
      expect(duration).toBeLessThan(10000); // Less than 10 seconds

      // Should return a slug for each game
      expect(slugMap.size).toBe(games.length);

      // All slugs should be valid
      for (const [gameId, slug] of slugMap.entries()) {
        expect(slug).toMatch(/^[a-z0-9-]+$/);
        expect(slug).not.toBe('');
        expect(slug).toContain('pokemon');
      }
    });
  });

  describe('Error Handling', () => {
    test('generateSlug should handle edge cases without errors', () => {
      const edgeCases = [
        '',
        '   ',
        '!!!@##$',
        'Ã©Ã©Ã©Ã©',
        'TrÃ¨s long nom de jeu avec beaucoup de caractÃ¨res accentuÃ©s Ã©mojis ðŸŽ®ðŸŽ¯',
        'Game\nWith\nNewlines',
        'Game\tWith\tTabs',
        'Game With "Quotes" and \'Apostrophes\'',
        'Game With [Brackets] and (Parentheses)',
        null, // This might cause an error, but should be handled gracefully
        undefined,
      ];

      edgeCases.forEach(input => {
        try {
          if (input === null || input === undefined) {
            // Skip these edge cases or handle them appropriately
            return;
          }
          const result = generateSlug(input);
          // Should return a string (even if empty)
          expect(typeof result).toBe('string');
          // Should only contain valid characters or be empty
          expect(result).toMatch(/^[a-z0-9-]*$/);
        } catch (error) {
          // If there's an error, it should be handled gracefully
          console.warn(`generateSlug failed for input: ${input}`, error);
        }
      });
    });

    test('should handle malformed queries gracefully', () => {
      // Test that malformed input doesn't cause 406 errors
      const malformedInputs = [
        'pokÃ©mon', // Accented character
        'cafÃ© society', // Accented character
        'naÃ¯ve', // Diaeresis
        'seÃ±or', // Tilde
        'ZÃ¼rich', // Umlaut
        'åŒ—äº¬', // Non-Latin characters
        'ðŸŽ®', // Emoji
        '   multiple   spaces   ', // Multiple spaces
        'trailing-hyphen-',
        '-leading-hyphen',
        'multiple---hyphens',
      ];

      malformedInputs.forEach(input => {
        const result = generateSlug(input);
        
        // Should not contain problematic characters
        expect(result).not.toMatch(/[Ã©Ã¨ÃªÃ«Ã¡Ã Ã¢Ã¤Ã£Ã¥Ã­Ã¬Ã®Ã¯Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼Ã±Ã§Ã¿Ã½]/);
        expect(result).not.toMatch(/[åŒ—äº¬ðŸŽ®]/);
        
        // Should be database/URL safe
        expect(result).toMatch(/^[a-z0-9-]*$/);
        
        // Should not have leading/trailing hyphens
        expect(result).not.toMatch(/^-|-$/);
        
        // Should not have multiple consecutive hyphens
        expect(result).not.toMatch(/--/);
      });
    });
  });

  describe('Pokemon-specific tests', () => {
    test('should handle Pokemon game names correctly', () => {
      const pokemonGames = [
        'PokÃ©mon Red Version',
        'PokÃ©mon Blue Version', 
        'PokÃ©mon Yellow Version',
        'PokÃ©mon Gold Version',
        'PokÃ©mon Silver Version',
        'PokÃ©mon Crystal Version',
        'PokÃ©mon Ruby Version',
        'PokÃ©mon Sapphire Version',
        'PokÃ©mon Emerald Version',
        'PokÃ©mon Diamond Version',
        'PokÃ©mon Pearl Version',
        'PokÃ©mon Platinum Version',
        'PokÃ©mon Black Version',
        'PokÃ©mon White Version',
        'PokÃ©mon Black Version 2',
        'PokÃ©mon White Version 2',
        'PokÃ©mon X',
        'PokÃ©mon Y',
        'PokÃ©mon Sun',
        'PokÃ©mon Moon',
        'PokÃ©mon Sword',
        'PokÃ©mon Shield',
        'PokÃ©mon Legends: Arceus',
        'PokÃ©mon Scarlet',
        'PokÃ©mon Violet'
      ];

      pokemonGames.forEach(gameName => {
        const slug = generateSlug(gameName);
        
        // Should contain 'pokemon', not 'pokmon'
        expect(slug).toContain('pokemon');
        expect(slug).not.toContain('pokmon');
        
        // Should be valid for database queries
        expect(slug).toMatch(/^[a-z0-9-]+$/);
        
        // Should not be empty
        expect(slug.length).toBeGreaterThan(0);
        
        console.log(`âœ“ ${gameName} -> ${slug}`);
      });
    });

    test('should handle Pokemon e-Reader games', () => {
      const eReaderGames = [
        'PokÃ©mon Channel-e Paint Pattern Card: PokÃ© a la Card!',
        'PokÃ©mon Battle-e Card: Freezing Ray!',
        'PokÃ©mon Battle-e Card: Iron Defense!',
        'PokÃ©mon Colosseum Double Battle Card-e: Blue Pack',
        'PokÃ©mon Project Studio Red/Blue Version',
      ];

      eReaderGames.forEach(gameName => {
        const slug = generateSlug(gameName);
        
        // Should handle the complex names properly
        expect(slug).toContain('pokemon');
        expect(slug).not.toContain('pokmon');
        expect(slug).toMatch(/^[a-z0-9-]+$/);
        
        // Should not break on special characters
        expect(slug).not.toContain('!');
        expect(slug).not.toContain(':');
        expect(slug).not.toContain('/');
        
        console.log(`âœ“ e-Reader: ${gameName} -> ${slug}`);
      });
    });
  });

  describe('Regression tests for specific errors', () => {
    test('should not produce slugs that cause 406 errors', () => {
      // These are real game names that were causing 406 errors
      const problematicNames = [
        'PokÃ©mon Blue Version',
        'PokÃ©mon Black Version 2', 
        'PokÃ©mon Mystery Dungeon: Blue Rescue Team',
        'PokÃ©mon Channel-e Paint Pattern Card: PokÃ© a la Card!',
        'Doubutsu no Mori e+ Card-e Reader to Card-e+',
        'PokÃ©mon Battle-e Card: Freezing Ray!',
        'PokÃ©mon Battle-e Card: Iron Defense!',
        'PokÃ©mon Colosseum Double Battle Card-e: Blue Pack',
        'PokÃ©mon Project Studio Red/Blue Version',
        'PokÃ©mon Project Studio Blue Version',
      ];

      problematicNames.forEach(name => {
        const slug = generateSlug(name);
        
        // Should not contain characters that break Supabase queries
        expect(slug).not.toContain('Ã©');
        expect(slug).not.toContain('+');
        expect(slug).not.toContain('!');
        expect(slug).not.toContain(':');
        expect(slug).not.toContain('/');
        
        // Should be safe for use in URLs like "slug=eq.{slug}"
        const queryParam = `slug=eq.${slug}`;
        expect(queryParam).toMatch(/^slug=eq\.[a-z0-9-]+$/);
        
        console.log(`âœ“ Fixed: ${name} -> ${slug}`);
      });
    });
  });
});