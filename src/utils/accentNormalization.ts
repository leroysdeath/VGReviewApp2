/**
 * Accent Normalization Utility
 * 
 * This utility provides functions to normalize accented characters for 
 * search functionality, allowing users to find games regardless of accent marks.
 * 
 * Examples:
 * - "pokemon" should match "Pok√©mon"
 * - "final fantasy" should match "Final Fantasy‚Ñ¢"
 * - "mario" should match "M√§rio" (hypothetical)
 */

/**
 * Normalize accented characters to their base forms
 * Uses Unicode normalization to convert accented characters
 */
export function normalizeAccents(text: string): string {
  if (!text || typeof text !== 'string') {
    return '';
  }

  return text
    // Step 1: Unicode normalization (NFD = decomposed form)
    .normalize('NFD')
    // Step 2: Remove combining marks (accents, diacritics)
    .replace(/[\u0300-\u036f]/g, '')
    // Step 3: Handle special cases that Unicode normalization misses
    .replace(/[√Ä√Å√Ç√É√Ñ√Ö√†√°√¢√£√§√•ƒÄƒÅƒÇƒÉƒÑƒÖ]/g, 'a')
    .replace(/[√á√ßƒÜƒáƒàƒâƒäƒãƒåƒç]/g, 'c')
    .replace(/[√êƒéƒë]/g, 'd')
    .replace(/[√à√â√ä√ã√®√©√™√´ƒíƒìƒîƒïƒñƒóƒòƒôƒöƒõ]/g, 'e')
    .replace(/[ƒúƒùƒûƒüƒ†ƒ°ƒ¢ƒ£]/g, 'g')
    .replace(/[ƒ§ƒ•ƒ¶ƒß]/g, 'h')
    .replace(/[√å√ç√é√è√¨√≠√Æ√Øƒ®ƒ©ƒ™ƒ´ƒ¨ƒ≠ƒÆƒØƒ∞ƒ±]/g, 'i')
    .replace(/[ƒ¥ƒµ]/g, 'j')
    .replace(/[ƒ∂ƒ∑]/g, 'k')
    .replace(/[ƒπƒ∫ƒªƒºƒΩƒæƒø≈Ä≈Å≈Ç]/g, 'l')
    .replace(/[√ë√±≈É≈Ñ≈Ö≈Ü≈á≈à]/g, 'n')
    .replace(/[√í√ì√î√ï√ñ√ò√≤√≥√¥√µ√∂√∏≈å≈ç≈é≈è≈ê≈ë]/g, 'o')
    .replace(/[≈î≈ï]/g, 'r')
    .replace(/[≈ö≈õ≈ú≈ù≈û≈ü≈†≈°]/g, 's')
    .replace(/[≈¢≈£≈§≈•]/g, 't')
    .replace(/[√ô√ö√õ√ú√π√∫√ª√º≈®≈©≈™≈´≈¨≈≠≈Æ≈Ø≈∞≈±≈≤≈≥]/g, 'u')
    .replace(/[≈¥≈µ]/g, 'w')
    .replace(/[√ù√ø√Ω≈∂≈∑≈∏]/g, 'y')
    .replace(/[≈π≈∫≈ª≈º≈Ω≈æ]/g, 'z')
    // Step 4: Remove trademark symbols and other special characters
    .replace(/[‚Ñ¢¬Æ¬©]/g, '')
    // Step 5: Clean up extra whitespace
    .replace(/\s+/g, ' ')
    .trim()
    // Step 6: Convert to lowercase for comparison
    .toLowerCase();
}

/**
 * Create both original and normalized versions of a query for comprehensive searching
 */
export function createSearchVariants(query: string): string[] {
  const normalized = normalizeAccents(query);
  const original = query.toLowerCase().trim();
  
  // Return both versions, removing duplicates
  const variants = [original, normalized];
  return [...new Set(variants)].filter(v => v.length > 0);
}

/**
 * Check if two strings match when normalized (accent-insensitive comparison)
 */
export function isAccentInsensitiveMatch(str1: string, str2: string): boolean {
  return normalizeAccents(str1) === normalizeAccents(str2);
}

/**
 * Game-specific accent normalization patterns
 * These handle common gaming franchise accent variations
 */
const GAME_SPECIFIC_NORMALIZATIONS: Record<string, string[]> = {
  // Pokemon variations
  'pokemon': ['pok√©mon', 'pokemon', 'pok√©mom'],
  'pok√©mon': ['pokemon', 'pok√©mon'],
  
  // Final Fantasy variations (in case there are accented versions)
  'final fantasy': ['final fantasy‚Ñ¢', 'final fantasy¬Æ'],
  
  // Dragon Quest variations (Dragon Warrior had accented versions in some regions)
  'dragon quest': ['dragon quest‚Ñ¢', 'dragon warrior'],
  
  // Other common gaming terms with potential accents
  'cafe': ['caf√©'],
  'resume': ['r√©sum√©', 'resum√©'],
  'elite': ['√©lite'],
  'pokemon red': ['pok√©mon red'],
  'pokemon blue': ['pok√©mon blue'],
  'pokemon yellow': ['pok√©mon yellow'],
  'pokemon gold': ['pok√©mon gold'],
  'pokemon silver': ['pok√©mon silver'],
  'pokemon crystal': ['pok√©mon crystal'],
  'pokemon ruby': ['pok√©mon ruby'],
  'pokemon sapphire': ['pok√©mon sapphire'],
  'pokemon emerald': ['pok√©mon emerald'],
  'pokemon diamond': ['pok√©mon diamond'],
  'pokemon pearl': ['pok√©mon pearl'],
  'pokemon platinum': ['pok√©mon platinum'],
  'pokemon black': ['pok√©mon black'],
  'pokemon white': ['pok√©mon white'],
  'pokemon x': ['pok√©mon x'],
  'pokemon y': ['pok√©mon y'],
  'pokemon sun': ['pok√©mon sun'],
  'pokemon moon': ['pok√©mon moon'],
  'pokemon sword': ['pok√©mon sword'],
  'pokemon shield': ['pok√©mon shield'],
  'pokemon legends': ['pok√©mon legends'],
  'pokemon scarlet': ['pok√©mon scarlet'],
  'pokemon violet': ['pok√©mon violet']
};

/**
 * Expand query with game-specific accent variations
 */
export function expandWithAccentVariations(query: string): string[] {
  const normalizedQuery = normalizeAccents(query);
  const lowerQuery = query.toLowerCase().trim();
  
  const expansions: string[] = [query, normalizedQuery];
  
  // Check for direct matches in our game-specific patterns
  Object.entries(GAME_SPECIFIC_NORMALIZATIONS).forEach(([key, variations]) => {
    if (normalizedQuery.includes(key) || lowerQuery.includes(key)) {
      expansions.push(...variations);
    }
    
    // Also check if any variation matches our query
    variations.forEach(variation => {
      if (normalizeAccents(variation).includes(normalizedQuery) || 
          variation.toLowerCase().includes(lowerQuery)) {
        expansions.push(key, ...variations);
      }
    });
  });
  
  // Remove duplicates and empty strings
  return [...new Set(expansions)].filter(exp => exp && exp.trim().length > 0);
}

/**
 * Test the accent normalization with common gaming examples
 */
export function testAccentNormalization(): void {
  console.log('üß™ Testing Accent Normalization:');
  
  const testCases = [
    { input: 'Pok√©mon', expected: 'pokemon' },
    { input: 'pok√©mon red', expected: 'pokemon red' },
    { input: 'Final Fantasy‚Ñ¢', expected: 'final fantasy' },
    { input: 'Caf√©', expected: 'cafe' },
    { input: 'R√©sum√©', expected: 'resume' },
    { input: 'na√Øve', expected: 'naive' },
    { input: 'S√∏rensen', expected: 'sorensen' },
    { input: 'M√ºller', expected: 'muller' }
  ];
  
  testCases.forEach(({ input, expected }) => {
    const result = normalizeAccents(input);
    const success = result === expected ? '‚úÖ' : '‚ùå';
    console.log(`${success} "${input}" ‚Üí "${result}" (expected: "${expected}")`);
  });
  
  console.log('\nüß™ Testing Pokemon Query Expansion:');
  const pokemonExpansions = expandWithAccentVariations('pokemon');
  console.log('pokemon expansions:', pokemonExpansions);
  
  const pokemonAccentExpansions = expandWithAccentVariations('pok√©mon');
  console.log('pok√©mon expansions:', pokemonAccentExpansions);
}

/**
 * Quick utility to check if a game name contains accented characters
 */
export function containsAccentedCharacters(text: string): boolean {
  if (!text) return false;
  return normalizeAccents(text) !== text.toLowerCase();
}

/**
 * Create a search-friendly version of a game name for indexing
 */
export function createSearchFriendlyName(gameName: string): string {
  return normalizeAccents(gameName)
    .replace(/[^\w\s]/g, ' ') // Replace non-alphanumeric with spaces
    .replace(/\s+/g, ' ') // Collapse multiple spaces
    .trim();
}