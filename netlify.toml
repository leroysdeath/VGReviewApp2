[build]
command = "npm install && npm run build"
publish = "dist"
# Enable Netlify's asset optimization
[build.processing]
css = { bundle = true, minify = true }
js = { bundle = true, minify = true }
html = { pretty_urls = true }
images = { compress = true }

[dev]
command = "npm run dev"
port = 8888
targetPort = 5173
autoLaunch = false
framework = "#auto"

[build.environment]
NODE_VERSION = "20"

# IMPORTANT: Order matters - more specific rules must come first

# Critical: Specific rule for index.html charset (fixes Lighthouse charset error)
[[headers]]
for = "/index.html"
[headers.values]
Content-Type = "text/html; charset=UTF-8"
Cache-Control = "public, max-age=0, must-revalidate"

# Critical: Root path charset (for when index.html is served at /)
[[headers]]
for = "/"
[headers.values]
Content-Type = "text/html; charset=UTF-8"
Cache-Control = "public, max-age=0, must-revalidate"

# Critical: All HTML files charset
[[headers]]
for = "/*.html"
[headers.values]
Content-Type = "text/html; charset=UTF-8"
Cache-Control = "public, max-age=0, must-revalidate"

# Enhanced security headers with CSP (general catch-all)
[[headers]]
for = "/*"
[headers.values]
# Content Security Policy - Comprehensive protection
Content-Security-Policy = "default-src 'self'; script-src 'self' https://*.supabase.co https://*.netlify.app https://www.googletagmanager.com https://www.google-analytics.com https://api.revenuecat.com https://sdk.revenuecat.com https://app.revenuecat.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https://*.supabase.co https://api.igdb.com wss://*.supabase.co https://www.google-analytics.com https://images.igdb.com https://api.revenuecat.com https://purchases.revenuecat.com https://api.segment.io; frame-src 'self' https://checkout.revenuecat.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests; report-uri /csp-report;"
# Report-only policy for testing (monitors violations without blocking)
Content-Security-Policy-Report-Only = "default-src 'self'; script-src 'self' https://*.supabase.co https://*.netlify.app https://www.googletagmanager.com https://www.google-analytics.com https://api.revenuecat.com https://sdk.revenuecat.com https://app.revenuecat.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https://*.supabase.co https://api.igdb.com wss://*.supabase.co https://www.google-analytics.com https://images.igdb.com https://api.revenuecat.com https://purchases.revenuecat.com https://api.segment.io; frame-src 'self' https://checkout.revenuecat.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests; report-uri /csp-report;"
# Security headers
X-Frame-Options = "DENY"
X-XSS-Protection = "1; mode=block"
X-Content-Type-Options = "nosniff"
Referrer-Policy = "strict-origin-when-cross-origin"
Permissions-Policy = "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()"
# Additional security headers
Strict-Transport-Security = "max-age=31536000; includeSubDomains; preload"
X-Permitted-Cross-Domain-Policies = "none"

# Production CORS headers for API (restrictive)
[[headers]]
for = "/api/*"
[headers.values]
Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With, X-Client-Info, ApiKey"
Access-Control-Max-Age = "86400"
Vary = "Origin"
# API-specific CSP
Content-Security-Policy = "default-src 'none'; frame-ancestors 'none';"

# Netlify Functions headers
[[headers]]
for = "/.netlify/functions/*"
[headers.values]
Access-Control-Allow-Origin = "*"
Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
Access-Control-Allow-Headers = "Content-Type, Authorization"
Content-Security-Policy = "default-src 'none'; frame-ancestors 'none';"

# Vite development files
[[headers]]
for = "/@vite/*"
[headers.values]
Content-Type = "application/javascript"
Cache-Control = "no-cache"

[[headers]]
for = "/@react-refresh"
[headers.values]
Content-Type = "application/javascript"
Cache-Control = "no-cache"

[[headers]]
for = "/src/*"
[headers.values]
Content-Type = "application/javascript"
Cache-Control = "no-cache"

# Strict CSP for payment routes (Phase 3 - future use)
[[headers]]
for = "/pro/*"
[headers.values]
Content-Security-Policy = "default-src 'self'; script-src 'self' https://api.revenuecat.com https://sdk.revenuecat.com https://app.revenuecat.com https://*.supabase.co; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https://*.supabase.co https://api.revenuecat.com https://purchases.revenuecat.com https://api.segment.io; frame-src 'self' https://checkout.revenuecat.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests; report-uri /csp-report;"
Strict-Transport-Security = "max-age=63072000; includeSubDomains; preload"
X-Frame-Options = "DENY"
X-Content-Type-Options = "nosniff"

[[headers]]
for = "/subscription/*"
[headers.values]
Content-Security-Policy = "default-src 'self'; script-src 'self' https://api.revenuecat.com https://sdk.revenuecat.com https://app.revenuecat.com https://*.supabase.co; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https://*.supabase.co https://api.revenuecat.com https://purchases.revenuecat.com https://api.segment.io; frame-src 'self' https://checkout.revenuecat.com; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests; report-uri /csp-report;"
Strict-Transport-Security = "max-age=63072000; includeSubDomains; preload"
X-Frame-Options = "DENY"
X-Content-Type-Options = "nosniff"

# Enable compression for JavaScript files in assets root
[[headers]]
for = "/assets/*.js"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"
Content-Encoding = "gzip"
Vary = "Accept-Encoding"

[[headers]]
for = "/assets/*.css"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"
Content-Encoding = "gzip"
Vary = "Accept-Encoding"

[[headers]]
for = "/*.html"
[headers.values]
Cache-Control = "public, max-age=0, must-revalidate"
Content-Encoding = "gzip"
Vary = "Accept-Encoding"

[[headers]]
for = "/*.json"
[headers.values]
Cache-Control = "public, max-age=3600"
Content-Encoding = "gzip"
Vary = "Accept-Encoding"

[[headers]]
for = "/*.svg"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"
Content-Encoding = "gzip"
Vary = "Accept-Encoding"

# Cache for static assets in chunks directory
[[headers]]
for = "/assets/chunks/*"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"
Content-Encoding = "gzip"
Vary = "Accept-Encoding"

# Cache for other static assets
[[headers]]
for = "/assets/*"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

# Cache for font files
[[headers]]
for = "/*.woff2"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

[[headers]]
for = "/*.woff"
[headers.values]
Cache-Control = "public, max-age=31536000, immutable"

# Cache for images
[[headers]]
for = "/assets/images/*"
[headers.values]
Cache-Control = "public, max-age=604800"

[[headers]]
for = "/*.webp"
[headers.values]
Cache-Control = "public, max-age=604800"

[[headers]]
for = "/*.avif"
[headers.values]
Cache-Control = "public, max-age=604800"

# Specific redirect for reset-password to ensure it works
[[redirects]]
from = "/reset-password"
to = "/index.html"
status = 200

# SPA fallback (keep this last)
[[redirects]]
from = "/*"
to = "/index.html"
status = 200
force = false

# Environment-specific configurations
[context.production.environment]
NODE_ENV = "production"
ENVIRONMENT = "production"

# Development-specific configuration
[context.deploy-preview]
[context.deploy-preview.environment]
NODE_ENV = "development"
ENVIRONMENT = "staging"

[[context.deploy-preview.headers]]
for = "/api/*"
[context.deploy-preview.headers.values]
Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With, X-Client-Info, ApiKey"
Access-Control-Allow-Credentials = "true"
Access-Control-Max-Age = "86400"
Vary = "Origin"

[context.branch-deploy]
[context.branch-deploy.environment]
NODE_ENV = "development"
ENVIRONMENT = "development"

[[context.branch-deploy.headers]]
for = "/api/*"
[context.branch-deploy.headers.values]
Access-Control-Allow-Methods = "GET, POST, PUT, DELETE, OPTIONS"
Access-Control-Allow-Headers = "Content-Type, Authorization, X-Requested-With, X-Client-Info, ApiKey"
Access-Control-Allow-Credentials = "true"
Access-Control-Max-Age = "86400"
Vary = "Origin"