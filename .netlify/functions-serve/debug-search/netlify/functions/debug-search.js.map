{
  "version": 3,
  "sources": ["../../../../Desktop/VGReview3/netlify/functions/debug-search.js"],
  "sourceRoot": "C:/Users/thoma/AppData/Local/Temp/tmp-7456-OsWMbpm4FiaO",
  "sourcesContent": ["// netlify/functions/debug-search.js\r\nexport const handler = async (event, context) => {\r\n  const headers = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Content-Type',\r\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return { statusCode: 200, headers, body: '' };\r\n  }\r\n\r\n  // Log everything we receive\r\n  const debugInfo = {\r\n    httpMethod: event.httpMethod,\r\n    path: event.path,\r\n    queryStringParameters: event.queryStringParameters,\r\n    headers: event.headers,\r\n    body: event.body,\r\n    timestamp: new Date().toISOString()\r\n  };\r\n\r\n  console.log('Debug - Request received:', JSON.stringify(debugInfo, null, 2));\r\n\r\n  // Try to extract query from all possible sources\r\n  let possibleQueries = {};\r\n\r\n  if (event.queryStringParameters) {\r\n    Object.keys(event.queryStringParameters).forEach(key => {\r\n      possibleQueries[key] = event.queryStringParameters[key];\r\n    });\r\n  }\r\n\r\n  if (event.body) {\r\n    try {\r\n      const bodyData = JSON.parse(event.body);\r\n      Object.keys(bodyData).forEach(key => {\r\n        possibleQueries[`body.${key}`] = bodyData[key];\r\n      });\r\n    } catch (e) {\r\n      possibleQueries['body_raw'] = event.body;\r\n    }\r\n  }\r\n\r\n  return {\r\n    statusCode: 200,\r\n    headers,\r\n    body: JSON.stringify({\r\n      message: 'Debug information collected',\r\n      debugInfo,\r\n      possibleQueries,\r\n      recommendation: Object.keys(possibleQueries).length === 0\r\n        ? 'No query parameters found - check your frontend implementation'\r\n        : `Found parameters: ${Object.keys(possibleQueries).join(', ')}`\r\n    }, null, 2)\r\n  };\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,IAAM,UAAU,OAAO,OAAO,YAAY;AAC/C,QAAM,UAAU;AAAA,IACd,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AAEA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO,EAAE,YAAY,KAAK,SAAS,MAAM,GAAG;AAAA,EAC9C;AAGA,QAAM,YAAY;AAAA,IAChB,YAAY,MAAM;AAAA,IAClB,MAAM,MAAM;AAAA,IACZ,uBAAuB,MAAM;AAAA,IAC7B,SAAS,MAAM;AAAA,IACf,MAAM,MAAM;AAAA,IACZ,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,EACpC;AAEA,UAAQ,IAAI,6BAA6B,KAAK,UAAU,WAAW,MAAM,CAAC,CAAC;AAG3E,MAAI,kBAAkB,CAAC;AAEvB,MAAI,MAAM,uBAAuB;AAC/B,WAAO,KAAK,MAAM,qBAAqB,EAAE,QAAQ,SAAO;AACtD,sBAAgB,GAAG,IAAI,MAAM,sBAAsB,GAAG;AAAA,IACxD,CAAC;AAAA,EACH;AAEA,MAAI,MAAM,MAAM;AACd,QAAI;AACF,YAAM,WAAW,KAAK,MAAM,MAAM,IAAI;AACtC,aAAO,KAAK,QAAQ,EAAE,QAAQ,SAAO;AACnC,wBAAgB,QAAQ,GAAG,EAAE,IAAI,SAAS,GAAG;AAAA,MAC/C,CAAC;AAAA,IACH,SAAS,GAAG;AACV,sBAAgB,UAAU,IAAI,MAAM;AAAA,IACtC;AAAA,EACF;AAEA,SAAO;AAAA,IACL,YAAY;AAAA,IACZ;AAAA,IACA,MAAM,KAAK,UAAU;AAAA,MACnB,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA,gBAAgB,OAAO,KAAK,eAAe,EAAE,WAAW,IACpD,mEACA,qBAAqB,OAAO,KAAK,eAAe,EAAE,KAAK,IAAI,CAAC;AAAA,IAClE,GAAG,MAAM,CAAC;AAAA,EACZ;AACF;",
  "names": []
}
