{
  "version": 3,
  "sources": ["../../../../Desktop/VGReview3/netlify/functions/igdb-search.cjs"],
  "sourceRoot": "C:/Users/thoma/AppData/Local/Temp/tmp-127500-K2Ofq9uoD4L3",
  "sourcesContent": ["// Netlify function to proxy IGDB API requests\r\nconst https = require('https');\r\n\r\n// Simple fetch polyfill for Node.js\r\nfunction fetch(url, options = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const urlObj = new URL(url);\r\n    const requestOptions = {\r\n      hostname: urlObj.hostname,\r\n      port: urlObj.port || (urlObj.protocol === 'https:' ? 443 : 80),\r\n      path: urlObj.pathname + urlObj.search,\r\n      method: options.method || 'GET',\r\n      headers: options.headers || {}\r\n    };\r\n\r\n    const req = https.request(requestOptions, (res) => {\r\n      let data = '';\r\n      res.on('data', (chunk) => data += chunk);\r\n      res.on('end', () => {\r\n        const response = {\r\n          ok: res.statusCode >= 200 && res.statusCode < 300,\r\n          status: res.statusCode,\r\n          statusText: res.statusMessage,\r\n          text: () => Promise.resolve(data),\r\n          json: () => Promise.resolve(JSON.parse(data))\r\n        };\r\n        resolve(response);\r\n      });\r\n    });\r\n\r\n    req.on('error', reject);\r\n    if (options.body) {\r\n      req.write(options.body);\r\n    }\r\n    req.end();\r\n  });\r\n}\r\n\r\nexports.handler = async (event, context) => {\r\n  // CORS headers\r\n  const headers = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Content-Type',\r\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n    'Content-Type': 'application/json'\r\n  };\r\n\r\n  // Handle preflight requests\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return { statusCode: 200, headers, body: '' };\r\n  }\r\n\r\n  try {\r\n    // Get API credentials from environment variables\r\n    const clientId = process.env.TWITCH_CLIENT_ID;\r\n    const accessToken = process.env.TWITCH_APP_ACCESS_TOKEN;\r\n\r\n    if (!clientId || !accessToken) {\r\n      console.error('Missing API credentials:', { hasClientId: !!clientId, hasAccessToken: !!accessToken });\r\n      return {\r\n        statusCode: 500,\r\n        headers,\r\n        body: JSON.stringify({\r\n          success: false,\r\n          error: 'Missing API credentials',\r\n          debug: { hasClientId: !!clientId, hasAccessToken: !!accessToken }\r\n        })\r\n      };\r\n    }\r\n\r\n    // Parse request data\r\n    let requestData = {};\r\n    if (event.body) {\r\n      try {\r\n        requestData = JSON.parse(event.body);\r\n      } catch (e) {\r\n        console.error('Failed to parse request body:', e);\r\n      }\r\n    }\r\n\r\n    const queryParams = event.queryStringParameters || {};\r\n\r\n    // Extract search parameters\r\n    let query = null;\r\n    let gameId = null;\r\n    let requestType = 'search';\r\n    let endpoint = 'games';\r\n    let customRequestBody = null;\r\n\r\n    if (requestData.isBulkRequest && requestData.endpoint) {\r\n      requestType = 'bulk';\r\n      endpoint = requestData.endpoint;\r\n      customRequestBody = requestData.requestBody;\r\n    } else if (requestData.type === 'getById' || requestData.gameId) {\r\n      requestType = 'getById';\r\n      gameId = requestData.gameId || queryParams.gameId || queryParams.id;\r\n    } else {\r\n      query = requestData.searchTerm || requestData.query || requestData.q || \r\n              queryParams.query || queryParams.q || queryParams.search || queryParams.term;\r\n    }\r\n\r\n    // Log request details for debugging\r\n    console.log('=========================');\r\n    console.log('IGDB API Request Details:');\r\n    console.log('Request Type:', requestType);\r\n    console.log('Query:', query);\r\n    console.log('Game ID:', gameId);\r\n    console.log('Endpoint:', endpoint);\r\n    console.log('Request Data:', requestData);\r\n    console.log('Query Params:', queryParams);\r\n    console.log('=========================');\r\n\r\n    const igdbUrl = `https://api.igdb.com/v4/${endpoint}`;\r\n    let requestBody = '';\r\n    let limit = requestData.limit || queryParams.limit || 20;\r\n\r\n    if (requestType === 'bulk') {\r\n      requestBody = customRequestBody;\r\n    } else if (requestType === 'getById') {\r\n      if (!gameId) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({\r\n            success: false,\r\n            error: 'Game ID is required for getById requests'\r\n          })\r\n        };\r\n      }\r\n      requestBody = `fields name, summary, first_release_date, rating, category, cover.url, genres.name, platforms.name, involved_companies.company.name; where id = ${gameId};`;\r\n    } else {\r\n      // Search request\r\n      if (!query || query.trim().length === 0) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({\r\n            success: false,\r\n            error: 'Search query is required'\r\n          })\r\n        };\r\n      }\r\n\r\n      // Build IGDB query for game search\r\n      requestBody = `fields name, summary, first_release_date, rating, category, cover.url, genres.name, platforms.name, involved_companies.company.name; search \"${query.trim()}\"; limit ${limit};`;\r\n    }\r\n\r\n    console.log('IGDB Request Body:', requestBody);\r\n\r\n    // Make request to IGDB API\r\n    const response = await fetch(igdbUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Client-ID': clientId,\r\n        'Authorization': `Bearer ${accessToken}`,\r\n        'Content-Type': 'text/plain'\r\n      },\r\n      body: requestBody\r\n    });\r\n\r\n    console.log('IGDB Response Status:', response.status);\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('IGDB API Error:', response.status, errorText);\r\n      return {\r\n        statusCode: response.status,\r\n        headers,\r\n        body: JSON.stringify({\r\n          success: false,\r\n          error: `IGDB API error: ${response.status}`,\r\n          details: errorText\r\n        })\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('IGDB Response Data:', data.length, 'games returned');\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers,\r\n      body: JSON.stringify({\r\n        success: true,\r\n        games: data || [],\r\n        query: query,\r\n        requestType: requestType\r\n      })\r\n    };\r\n\r\n  } catch (error) {\r\n    console.error('Function error:', error);\r\n    return {\r\n      statusCode: 500,\r\n      headers,\r\n      body: JSON.stringify({\r\n        success: false,\r\n        error: 'Internal server error',\r\n        details: error.message\r\n      })\r\n    };\r\n  }\r\n};"],
  "mappings": "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",
  "names": []
}
