{
  "version": 3,
  "sources": ["../../../../Desktop/VGReview3/netlify/functions/igdb-search.cjs"],
  "sourceRoot": "C:/Users/thoma/AppData/Local/Temp/tmp-7456-F74tlej82CHP",
  "sourcesContent": ["// netlify/functions/igdb-search.js\r\nconst https = require('https');\r\nconst { URL, URLSearchParams } = require('url');\r\n\r\n// Simple fetch implementation for Node.js\r\nfunction fetch(url, options = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    const urlObj = new URL(url);\r\n    const requestOptions = {\r\n      hostname: urlObj.hostname,\r\n      port: urlObj.port || (urlObj.protocol === 'https:' ? 443 : 80),\r\n      path: urlObj.pathname + urlObj.search,\r\n      method: options.method || 'GET',\r\n      headers: options.headers || {}\r\n    };\r\n\r\n    const req = https.request(requestOptions, (res) => {\r\n      let data = '';\r\n      res.on('data', chunk => data += chunk);\r\n      res.on('end', () => {\r\n        const response = {\r\n          ok: res.statusCode >= 200 && res.statusCode < 300,\r\n          status: res.statusCode,\r\n          statusText: res.statusMessage,\r\n          text: () => Promise.resolve(data),\r\n          json: () => Promise.resolve(JSON.parse(data))\r\n        };\r\n        resolve(response);\r\n      });\r\n    });\r\n\r\n    req.on('error', reject);\r\n    \r\n    if (options.body) {\r\n      req.write(options.body);\r\n    }\r\n    \r\n    req.end();\r\n  });\r\n}\r\n\r\nexports.handler = async (event, context) => {\r\n  const headers = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'Content-Type',\r\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return { statusCode: 200, headers, body: '' };\r\n  }\r\n\r\n  try {\r\n    const clientId = process.env.TWITCH_CLIENT_ID;\r\n    const accessToken = process.env.TWITCH_APP_ACCESS_TOKEN;\r\n\r\n    if (!clientId || !accessToken) {\r\n      return {\r\n        statusCode: 500,\r\n        headers,\r\n        body: JSON.stringify({\r\n          error: 'Missing API credentials',\r\n          debug: { hasClientId: !!clientId, hasAccessToken: !!accessToken }\r\n        })\r\n      };\r\n    }\r\n\r\n    let requestData = {};\r\n\r\n    // Parse request data\r\n    if (event.body) {\r\n      try {\r\n        requestData = JSON.parse(event.body);\r\n      } catch (e) {\r\n        console.error('Failed to parse request body:', e);\r\n      }\r\n    }\r\n\r\n    // Extract query parameters\r\n    const queryParams = event.queryStringParameters || {};\r\n\r\n    // Determine request type and extract relevant data\r\n    let query = null;\r\n    let gameId = null;\r\n    let requestType = 'search'; // default\r\n    let endpoint = 'games'; // default endpoint\r\n    let customRequestBody = null;\r\n\r\n    // Check if this is a bulk scraping request\r\n    if (requestData.isBulkRequest && requestData.endpoint) {\r\n      requestType = 'bulk';\r\n      endpoint = requestData.endpoint;\r\n      customRequestBody = requestData.requestBody;\r\n    }\r\n    // Check if this is a game ID lookup request\r\n    else if (requestData.type === 'getById' || requestData.gameId) {\r\n      requestType = 'getById';\r\n      gameId = requestData.gameId || queryParams.gameId || queryParams.id;\r\n    } else {\r\n      // This is a search request\r\n      query = requestData.searchTerm || requestData.query || requestData.q ||\r\n              queryParams.query || queryParams.q || queryParams.search || queryParams.term;\r\n    }\r\n\r\n    console.log('=== IGDB REQUEST DEBUG ===');\r\n    console.log('HTTP Method:', event.httpMethod);\r\n    console.log('Request Type:', requestType);\r\n    console.log('Endpoint:', endpoint);\r\n    console.log('Query:', query);\r\n    console.log('Game ID:', gameId);\r\n    console.log('Request Data:', requestData);\r\n    console.log('Query Params:', queryParams);\r\n    console.log('=========================');\r\n\r\n    const igdbUrl = `https://api.igdb.com/v4/${endpoint}`;\r\n    let requestBody = '';\r\n    let limit = requestData.limit || queryParams.limit || 20;\r\n\r\n    if (requestType === 'bulk') {\r\n      // Handle bulk scraping request with custom request body\r\n      if (!customRequestBody) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({\r\n            error: 'Request body is required for bulk requests',\r\n            debug: { requestData, queryParams }\r\n          })\r\n        };\r\n      }\r\n\r\n      requestBody = customRequestBody;\r\n      console.log('Making IGDB bulk request for endpoint:', endpoint);\r\n    } else if (requestType === 'getById') {\r\n      // Handle individual game lookup by ID\r\n      if (!gameId) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({\r\n            error: 'Game ID is required for getById request',\r\n            debug: { requestData, queryParams }\r\n          })\r\n        };\r\n      }\r\n\r\n      requestBody = `\r\nfields name, cover.url, first_release_date, rating, summary, platforms.name, genres.name, involved_companies.company.name, involved_companies.developer, involved_companies.publisher;\r\nwhere id = ${gameId};\r\n      `.trim();\r\n\r\n      console.log('Making IGDB request for game ID:', gameId);\r\n    } else {\r\n      // Handle search request\r\n      if (!query || query.trim().length === 0) {\r\n        return {\r\n          statusCode: 400,\r\n          headers,\r\n          body: JSON.stringify({\r\n            error: 'Search query is required',\r\n            debug: {\r\n              receivedParams: queryParams,\r\n              receivedBody: event.body ? 'Present' : 'Missing',\r\n              extractedQuery: query,\r\n              message: 'No valid search term found in request'\r\n            }\r\n          })\r\n        };\r\n      }\r\n\r\n      query = query.trim();\r\n      requestBody = `\r\nfields name, cover.url, first_release_date, rating, summary, platforms.name, genres.name, involved_companies.company.name, involved_companies.developer, involved_companies.publisher;\r\nsearch \"${query}\";\r\nlimit ${limit};\r\n      `.trim();\r\n\r\n      console.log('Making IGDB search request for query:', query);\r\n    }\r\n\r\n    const response = await fetch(igdbUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Client-ID': clientId,\r\n        'Authorization': `Bearer ${accessToken}`,\r\n        'Content-Type': 'text/plain',\r\n      },\r\n      body: requestBody,\r\n    });\r\n\r\n    console.log('IGDB response status:', response.status);\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      console.error('IGDB API error:', response.status, errorText);\r\n\r\n      if (response.status === 401) {\r\n        return {\r\n          statusCode: 401,\r\n          headers,\r\n          body: JSON.stringify({\r\n            error: 'Authentication failed - check your API credentials',\r\n            details: errorText\r\n          })\r\n        };\r\n      }\r\n\r\n      return {\r\n        statusCode: response.status,\r\n        headers,\r\n        body: JSON.stringify({\r\n          error: 'IGDB API error',\r\n          status: response.status,\r\n          details: errorText\r\n        })\r\n      };\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('IGDB data received:', data.length, 'games');\r\n\r\n    // Transform the data to ensure cover URLs are complete and add developer/publisher info\r\n    const transformedData = data.map(game => {\r\n      // Extract developer and publisher from involved_companies\r\n      let developer = 'Unknown';\r\n      let publisher = 'Unknown';\r\n\r\n      if (game.involved_companies && game.involved_companies.length > 0) {\r\n        const dev = game.involved_companies.find(ic => ic.developer && ic.company);\r\n        const pub = game.involved_companies.find(ic => ic.publisher && ic.company);\r\n\r\n        if (dev && dev.company && dev.company.name) {\r\n          developer = dev.company.name;\r\n        }\r\n        if (pub && pub.company && pub.company.name) {\r\n          publisher = pub.company.name;\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...game,\r\n        developer,\r\n        publisher,\r\n        cover: game.cover ? {\r\n          ...game.cover,\r\n          url: game.cover.url?.startsWith('//')\r\n            ? `https:${game.cover.url}`\r\n            : game.cover.url\r\n        } : null\r\n      };\r\n    });\r\n\r\n    // Return the appropriate response format\r\n    if (requestType === 'getById') {\r\n      // For individual game requests, return the game directly or null\r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify(transformedData.length > 0 ? transformedData[0] : null)\r\n      };\r\n    } else if (requestType === 'bulk') {\r\n      // For bulk requests, return the raw data array\r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify(transformedData)\r\n      };\r\n    } else {\r\n      // For search requests, return the full response with metadata\r\n      return {\r\n        statusCode: 200,\r\n        headers,\r\n        body: JSON.stringify({\r\n          success: true,\r\n          query: query,\r\n          count: transformedData.length,\r\n          games: transformedData\r\n        })\r\n      };\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Function error:', error);\r\n    return {\r\n      statusCode: 500,\r\n      headers,\r\n      body: JSON.stringify({\r\n        error: 'Internal server error',\r\n        message: error.message,\r\n        stack: error.stack\r\n      })\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
