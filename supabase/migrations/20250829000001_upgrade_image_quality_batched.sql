-- Migration: Upgrade all game cover images from t_thumb to t_cover_big (BATCHED VERSION)
-- This migration updates ~96,700 game records to use higher quality cover images
-- Uses batched updates to avoid deadlocks and timeouts
-- 
-- Background: Games were imported with low-quality thumbnail images (t_thumb: 90x128px)
-- This upgrades them to cover_big (264x374px) for better visual quality
--
-- Author: Generated by Claude Code
-- Date: 2025-08-29

-- Function to perform batched updates
CREATE OR REPLACE FUNCTION upgrade_image_quality_batch()
RETURNS void AS $$
DECLARE
  batch_size INTEGER := 1000;
  total_updated INTEGER := 0;
  batch_count INTEGER;
  total_to_update INTEGER;
BEGIN
  -- Get total count for progress tracking
  SELECT COUNT(*) INTO total_to_update 
  FROM game 
  WHERE cover_url LIKE '%t_thumb%' OR pic_url LIKE '%t_thumb%';
  
  RAISE NOTICE 'Starting batch update of % records...', total_to_update;
  
  -- Update cover_url in batches
  LOOP
    -- Update a batch of cover_url
    WITH batch AS (
      SELECT id FROM game 
      WHERE cover_url LIKE '%t_thumb%'
      LIMIT batch_size
      FOR UPDATE SKIP LOCKED  -- Skip locked rows to avoid deadlocks
    )
    UPDATE game 
    SET 
      cover_url = REPLACE(cover_url, 't_thumb', 't_cover_big'),
      updated_at = NOW()
    WHERE id IN (SELECT id FROM batch);
    
    GET DIAGNOSTICS batch_count = ROW_COUNT;
    total_updated := total_updated + batch_count;
    
    EXIT WHEN batch_count = 0;
    
    -- Progress update every 10 batches
    IF total_updated % (batch_size * 10) = 0 THEN
      RAISE NOTICE 'Updated % cover_url records so far...', total_updated;
    END IF;
    
    -- Small delay to reduce lock contention
    PERFORM pg_sleep(0.01);
  END LOOP;
  
  RAISE NOTICE 'Completed updating % cover_url records', total_updated;
  
  -- Reset counter for pic_url updates
  total_updated := 0;
  
  -- Update pic_url in batches
  LOOP
    -- Update a batch of pic_url
    WITH batch AS (
      SELECT id FROM game 
      WHERE pic_url LIKE '%t_thumb%'
      LIMIT batch_size
      FOR UPDATE SKIP LOCKED  -- Skip locked rows to avoid deadlocks
    )
    UPDATE game 
    SET 
      pic_url = REPLACE(pic_url, 't_thumb', 't_cover_big'),
      updated_at = NOW()
    WHERE id IN (SELECT id FROM batch);
    
    GET DIAGNOSTICS batch_count = ROW_COUNT;
    total_updated := total_updated + batch_count;
    
    EXIT WHEN batch_count = 0;
    
    -- Progress update every 10 batches
    IF total_updated % (batch_size * 10) = 0 THEN
      RAISE NOTICE 'Updated % pic_url records so far...', total_updated;
    END IF;
    
    -- Small delay to reduce lock contention
    PERFORM pg_sleep(0.01);
  END LOOP;
  
  RAISE NOTICE 'Completed updating % pic_url records', total_updated;
END;
$$ LANGUAGE plpgsql;

-- Execute the batched update
SELECT upgrade_image_quality_batch();

-- Drop the temporary function
DROP FUNCTION IF EXISTS upgrade_image_quality_batch();

-- Create indexes on cover_url and pic_url if they don't exist (for performance)
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_game_cover_url') THEN
    CREATE INDEX CONCURRENTLY idx_game_cover_url ON game(cover_url) WHERE cover_url IS NOT NULL;
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'idx_game_pic_url') THEN
    CREATE INDEX CONCURRENTLY idx_game_pic_url ON game(pic_url) WHERE pic_url IS NOT NULL;
  END IF;
END
$$;

-- Add comments to track this migration
COMMENT ON COLUMN game.cover_url IS 'Game cover image URL - upgraded to t_cover_big quality on 2025-08-29';
COMMENT ON COLUMN game.pic_url IS 'Game picture URL - upgraded to t_cover_big quality on 2025-08-29';

-- Output final statistics
DO $$
DECLARE
  cover_big_count INTEGER;
  pic_big_count INTEGER;
  thumb_cover_count INTEGER;
  thumb_pic_count INTEGER;
  total_games INTEGER;
BEGIN
  SELECT COUNT(*) INTO cover_big_count FROM game WHERE cover_url LIKE '%t_cover_big%';
  SELECT COUNT(*) INTO pic_big_count FROM game WHERE pic_url LIKE '%t_cover_big%';
  SELECT COUNT(*) INTO thumb_cover_count FROM game WHERE cover_url LIKE '%t_thumb%';
  SELECT COUNT(*) INTO thumb_pic_count FROM game WHERE pic_url LIKE '%t_thumb%';
  SELECT COUNT(*) INTO total_games FROM game;
  
  RAISE NOTICE '=================================';
  RAISE NOTICE 'Migration completed successfully!';
  RAISE NOTICE '=================================';
  RAISE NOTICE 'Games with high-quality cover_url: % / %', cover_big_count, total_games;
  RAISE NOTICE 'Games with high-quality pic_url: % / %', pic_big_count, total_games;
  RAISE NOTICE 'Remaining thumb cover_url: %', thumb_cover_count;
  RAISE NOTICE 'Remaining thumb pic_url: %', thumb_pic_count;
  RAISE NOTICE '=================================';
END
$$;